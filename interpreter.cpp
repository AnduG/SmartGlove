#include "interpreter.h"
#include "math.h"

float weights[CLASSES][INPUTS] = {
  {0.040182f, -0.071736f, -0.025507f, 0.086005f, -0.121051f, 0.145713f, -0.236098f, 0.099039f, 0.001401f, 0.134060f, -0.027436f, -0.060819f, 0.101492f, -0.017666f, -0.026506f, 0.023762f, 0.013420f, 0.098328f},
  {-0.004709f, 0.025216f, 0.035203f, -0.035469f, 0.034411f, 0.097113f, -0.019374f, -0.056718f, 0.031976f, -0.006798f, -0.028670f, 0.021315f, -0.017014f, -0.043344f, 0.018198f, -0.052649f, -0.081870f, -0.026399f},
  {0.030001f, -0.019874f, 0.021758f, -0.050488f, 0.098429f, -0.009157f, 0.075999f, 0.057902f, 0.034389f, 0.045095f, 0.029562f, -0.010915f, 0.001931f, -0.037831f, 0.177671f, -0.025046f, -0.080753f, 0.100454f},
  {0.109962f, 0.002887f, 0.024898f, -0.017690f, -0.035281f, 0.152038f, -0.099115f, -0.120055f, 0.088781f, -0.016063f, 0.078432f, -0.023593f, 0.064301f, -0.024412f, -0.086673f, 0.049204f, -0.030190f, 0.052943f},
  {-0.098813f, -0.144165f, 0.055494f, -0.028938f, 0.285742f, 0.074324f, -0.053141f, -0.047482f, -0.133813f, -0.245383f, 0.061340f, 0.163804f, 0.090730f, 0.046155f, -0.149334f, -0.182436f, 0.099804f, 0.161846f},
  {0.002255f, 0.050132f, 0.085016f, 0.017085f, 0.013094f, -0.027834f, -0.032450f, 0.094130f, -0.107848f, -0.061037f, -0.063436f, 0.107993f, -0.049597f, -0.087751f, 0.071888f, -0.033745f, -0.092375f, 0.052130f},
  {-0.093668f, -0.015793f, 0.030805f, 0.018422f, 0.178053f, -0.079371f, -0.172320f, 0.137778f, 0.130276f, 0.021482f, 0.133550f, -0.002038f, 0.098245f, -0.064457f, -0.127193f, -0.043054f, 0.039211f, 0.056310f},
  {-0.022190f, -0.088047f, -0.039266f, -0.003311f, 0.065668f, 0.027377f, 0.041874f, -0.081378f, -0.026685f, 0.028155f, -0.031427f, 0.006442f, 0.035715f, -0.025037f, 0.015110f, 0.012118f, -0.092402f, -0.010560f},
  {0.097473f, 0.030895f, 0.104390f, -0.017297f, 0.006919f, 0.080738f, -0.074092f, 0.029882f, -0.031327f, -0.059405f, 0.044421f, 0.126276f, -0.022512f, 0.078931f, -0.063301f, 0.082276f, -0.163862f, 0.088434f},
  {0.061212f, -0.029338f, -0.022736f, 0.082383f, -0.015953f, 0.077138f, 0.034006f, -0.027851f, -0.042333f, 0.004671f, -0.045331f, -0.031630f, -0.025767f, -0.051592f, -0.050450f, 0.000970f, 0.068386f, -0.039227f},
  {-0.062614f, -0.168054f, -0.073941f, 0.149091f, -0.103936f, -0.034674f, -0.143729f, -0.060689f, -0.152133f, 0.089775f, -0.052351f, 0.046793f, 0.103057f, 0.023113f, -0.076160f, -0.065216f, -0.038914f, 0.095840f},
  {-0.038714f, 0.005679f, -0.074339f, 0.044207f, 0.007228f, -0.138637f, -0.003425f, -0.170190f, 0.015378f, 0.038589f, 0.075081f, -0.006098f, 0.045640f, 0.033963f, -0.012952f, 0.022021f, 0.108822f, -0.102375f},
  {0.113375f, -0.064326f, 0.075627f, -0.085747f, -0.064703f, 0.191296f, -0.106283f, 0.064472f, -0.087271f, -0.040027f, 0.015827f, -0.004146f, -0.004992f, 0.027883f, 0.047092f, 0.001898f, 0.011192f, -0.094223f},
  {0.026427f, 0.034050f, 0.034408f, 0.016186f, -0.153845f, -0.047890f, 0.033184f, 0.106252f, 0.022967f, 0.021575f, 0.077842f, 0.052261f, 0.047991f, -0.010598f, -0.088526f, 0.123980f, -0.023307f, -0.118862f},
  {-0.068355f, 0.225651f, -0.112162f, -0.078758f, -0.061892f, -0.146342f, 0.155554f, 0.225032f, -0.144372f, 0.242444f, -0.055022f, -0.318513f, -0.085627f, -0.003491f, 0.230107f, 0.122825f, 0.078243f, 0.148465f},
  {0.070034f, -0.035932f, 0.016546f, -0.026881f, 0.025782f, -0.008447f, 0.079116f, -0.046905f, 0.130123f, 0.047987f, 0.119917f, 0.144674f, -0.021247f, 0.027638f, -0.037127f, 0.014522f, 0.011517f, -0.135112f},
  {0.004805f, -0.003571f, 0.035993f, 0.012425f, 0.030984f, 0.020401f, 0.043150f, 0.030550f, 0.078460f, -0.004801f, -0.064657f, -0.085413f, -0.017772f, -0.042341f, -0.065217f, 0.025790f, -0.040679f, -0.061764f},
  {0.024726f, 0.062647f, -0.052753f, -0.112388f, -0.085843f, -0.054808f, 0.156379f, -0.115998f, -0.002185f, 0.011256f, -0.036871f, 0.010210f, -0.015754f, 0.016222f, 0.115820f, 0.106056f, 0.051450f, -0.036043f},
  {-0.125768f, 0.000414f, -0.025364f, -0.011051f, -0.093356f, 0.034281f, -0.026528f, -0.013122f, -0.098162f, -0.044635f, -0.034050f, -0.077290f, -0.030235f, -0.014121f, -0.087936f, -0.000546f, 0.014807f, -0.086859f},
  {-0.085325f, 0.053366f, -0.037448f, 0.009687f, 0.004585f, -0.057857f, 0.099986f, 0.066654f, -0.123998f, -0.045716f, 0.042307f, 0.109852f, -0.137250f, 0.083153f, 0.073169f, -0.125522f, 0.157278f, -0.209928f},
  {0.006111f, 0.095130f, -0.088797f, -0.013903f, 0.024319f, 0.142194f, 0.158005f, -0.007135f, 0.073998f, -0.115006f, -0.083818f, 0.036881f, -0.013658f, 0.052816f, -0.086442f, -0.039852f, 0.071475f, -0.018181f},
  {0.043800f, 0.027951f, 0.074153f, -0.073105f, 0.104352f, -0.025055f, -0.256616f, -0.048584f, 0.072472f, 0.031066f, -0.129736f, 0.057588f, -0.028399f, 0.110471f, -0.025066f, -0.048004f, 0.086020f, -0.074787f},
  {0.027914f, 0.022857f, 0.067225f, -0.018214f, 0.018375f, 0.006886f, -0.036711f, -0.014433f, 0.026121f, -0.072353f, -0.085272f, -0.000058f, -0.021434f, -0.113596f, 0.042670f, 0.023884f, 0.073056f, 0.088771f},
  {-0.008678f, -0.018641f, -0.031610f, -0.020978f, 0.044802f, 0.029113f, 0.161879f, -0.018088f, 0.066122f, -0.021692f, 0.009025f, -0.182655f, -0.009354f, 0.111420f, 0.131478f, 0.041000f, 0.004731f, 0.015486f},
  {-0.053260f, 0.002232f, 0.012703f, 0.020243f, -0.032064f, -0.205520f, 0.098504f, 0.028809f, 0.016936f, 0.023672f, 0.056431f, -0.186171f, -0.061513f, 0.032826f, 0.011966f, -0.091549f, -0.140732f, 0.011737f},
  {0.037133f, 0.082812f, 0.022788f, -0.017232f, -0.054975f, -0.071779f, -0.000180f, -0.106287f, 0.057955f, -0.059374f, -0.008931f, -0.073526f, -0.098600f, 0.019718f, -0.066726f, -0.081629f, 0.017913f, 0.070990f},
  {0.053253f, -0.040637f, -0.072183f, 0.023503f, 0.004494f, 0.019679f, 0.041500f, 0.010562f, 0.080625f, 0.016375f, -0.022106f, 0.155737f, 0.017848f, -0.020413f, 0.074526f, 0.006111f, -0.049512f, -0.009426f},
  {-0.013707f, 0.009699f, -0.017797f, 0.047895f, -0.047030f, -0.085593f, 0.013032f, -0.073109f, 0.035602f, -0.016779f, -0.017123f, 0.029095f, -0.003040f, -0.089633f, -0.003638f, 0.009811f, -0.057899f, -0.003796f},
  {-0.072860f, -0.031505f, -0.023105f, 0.084320f, -0.077308f, -0.105326f, 0.067895f, 0.056962f, -0.013454f, 0.052867f, 0.042503f, -0.006054f, 0.056816f, -0.018027f, 0.043551f, 0.123022f, -0.014829f, -0.014191f},
};

float bias[CLASSES] = {
  -0.002125f,
  -0.000787f,
  -0.002098f,
  -0.001812f,
  0.008580f,
  0.003495f,
  0.002609f,
  0.000281f,
  0.000225f,
  0.000818f,
  0.000502f,
  0.000714f,
  -0.001143f,
  0.000158f,
  -0.006191f,
  -0.000770f,
  0.001083f,
  -0.001799f,
  0.000557f,
  0.000490f,
  -0.002690f,
  -0.000308f,
  0.001000f,
  -0.000030f,
  0.002570f,
  -0.001988f,
  -0.002529f,
  -0.000046f,
  0.001232f,
};


int classify(float values[INPUTS]) {
  float scores[CLASSES];
  for (int i = 0; i < CLASSES; i++) {
    scores[i] = make_score(values, i);
  }
  int guess;
  float prob;
  softmax(scores, &guess, &prob);
  if (prob > 80) {
    return guess;
  } else {
    return -1;
  }
}

float make_score(float values[INPUTS], int row) {
  float score = bias[row];
  for (int j = 0; j < INPUTS; j++) {
    score += weights[row][j] * values[j];
  }
  return score;
}

void softmax(float scores[CLASSES], int* guess, float* prob) {
  float max_score = -INFINITY;
  for (int i = 0; i < CLASSES; ++i) {
    if (scores[i] > max_score) { 
      max_score = scores[i];
      *guess = i;
    }
  }
  float sum = 0;
  for(int i = 0; i < CLASSES; i++) {
    scores[i] = expf(scores[i] - max_score);
    sum += scores[i];
  }
  *prob = 100.0f / sum;
}

char translate(int x) {
  return 'A' + x;
}
